package com.ase.gymjudge.controller;

//import org.springframework.http.ResponseEntity;
import com.ase.gymjudge.entities.CompetitionDEMO;
import com.ase.gymjudge.repositories.CompRepository;
import com.ase.gymjudge.repositories.UserRepositoryDemo;
import com.ase.gymjudge.entities.PersonDEMO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@Controller
public class MainControllerDEMO {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepositoryDemo userRepository;

    @Autowired
    private CompRepository compRepository;

    //Examples using Database
    @RequestMapping(value = { "/", "/index" }, method = RequestMethod.GET)
    public String showIndex() {
        return "index";
    }
    @RequestMapping(value = { "/login" }, method = RequestMethod.GET)
    public String goToLogin() {
        return "login";
    }
    @RequestMapping(value = { "/signup" }, method = RequestMethod.GET)
    public String showSignUpForm(Model model) {
        PersonDEMO user = new PersonDEMO();
        model.addAttribute("user", user);
        return "addUserDEMO";
    }
    @PostMapping("/adduser")
    public String addUser(@Valid PersonDEMO persondemo, BindingResult result, Model model) {
        if (result.hasErrors()) {
            return "addUserDEMO";
        }

        userRepository.save(persondemo);
        model.addAttribute("users", userRepository.findAll());
        return "showUserDEMO";
    }
    @RequestMapping(value = {"/createCompetition"}, method = RequestMethod.GET)
    public String createCompetition(Model model) {
        model.addAttribute("comp", new CompetitionDEMO());
        return "createCompetition";
    }
    @PostMapping("/addComp")
    public String addComp(@Valid CompetitionDEMO comp, BindingResult result, Model model) {
        if (result.hasErrors()) {
            System.out.println("MY ERROR HERE.");
            return "createCompetition";
        }

        compRepository.save(comp);
        model.addAttribute("comps", compRepository.findAll());
        return "showCompetitions";
    }
    @GetMapping("/showUser")
    public String showUsers(PersonDEMO persondemo, Model model) {
        model.addAttribute("users", userRepository.findAll());
        return "showUserDEMO";
    }

    //Other examples
    /*
    private static List<PersonDEMO> persons = new ArrayList<PersonDEMO>();
    static {
        persons.add(new PersonDEMO("Bill", "Gates"));
        persons.add(new PersonDEMO("Steve", "Jobs"));
    }

    // Aus Application.properties abspritzen (inject).
    @Value("${welcome.message}")
    private String message;

    @Value("${error.message}")
    private String errorMessage;

    @RequestMapping(value = { "/", "/index" }, method = RequestMethod.GET)
    public String index(Model model) {

        model.addAttribute("message", message);
        return "indexDEMO";
    }
    @RequestMapping(value = { "/personList" }, method = RequestMethod.GET)
    public String personList(Model model) {

        model.addAttribute("persons", persons);
        return "personListDEMO";
    }

    @RequestMapping(value = { "/addPerson" }, method = RequestMethod.GET)
    public String showAddPersonPage(Model model) {

        PersonFormDEMO personForm = new PersonFormDEMO();
        model.addAttribute("personForm", personForm);

        return "addPersonDEMO";
    }

    @RequestMapping(value = { "/addPerson" }, method = RequestMethod.POST)
    public String savePerson(Model model, //
                             @ModelAttribute("personForm") PersonFormDEMO personForm) {

        String firstName = personForm.getFirstName();
        String lastName = personForm.getLastName();

        if (firstName != null && firstName.length() > 0 //
                && lastName != null && lastName.length() > 0) {
            PersonDEMO newPerson = new PersonDEMO(firstName, lastName);
            persons.add(newPerson);

            return "redirect:/personList";
        }

        model.addAttribute("errorMessage", errorMessage);
        return "addPersonDEMO";
    }*/
}
